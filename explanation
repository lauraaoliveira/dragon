üìö EXPLICA√á√ÉO COMPLETA DO SISTEMA DE DRAG√ïES
Vou explicar TODOS os conceitos de POO aplicados no c√≥digo:

üèóÔ∏è 1. ESTRUTURA GERAL
src/
‚îú‚îÄ‚îÄ Main.java              // Interface com usu√°rio
‚îú‚îÄ‚îÄ enums/                 // Valores fixos (constantes)
‚îú‚îÄ‚îÄ exceptions/            // Erros personalizados
‚îú‚îÄ‚îÄ interfaces/            // Contratos (obriga√ß√µes)
‚îú‚îÄ‚îÄ abstracts/             // Classes base incompletas
‚îî‚îÄ‚îÄ models/                // Classes principais do sistema

üéØ 2. CONCEITOS APLICADOS
üìå ENUM (Enumera√ß√£o)
javapublic enum Elemento {
    FOGO, GELO, RAIO;  // Valores fixos
    
    public boolean temVantagemContra(Elemento outro) {
        return (this == FOGO && outro == GELO) ||
               (this == GELO && outro == RAIO) ||
               (this == RAIO && outro == FOGO);
    }
}
O que √©: Tipo de dado com valores fixos e limitados.
Por que usar:

Evita erros de digita√ß√£o ("FFOGO" n√£o existe)
Garante que s√≥ existem 3 elementos poss√≠veis
Pode ter m√©todos (como temVantagemContra)

Onde est√°:

Elemento.java - tipos de drag√£o
StatusDragao.java - SAUDAVEL, FERIDO, DERROTADO


‚ö†Ô∏è EXCE√á√ïES PERSONALIZADAS
javapublic class EnergiaInsuficienteException extends Exception {
    public EnergiaInsuficienteException(String mensagem) {
        super(mensagem);
    }
}
O que √©: Erros customizados para situa√ß√µes espec√≠ficas.
Por que usar:

Trata problemas espec√≠ficos do sistema
D√° mensagens mais claras
Permite capturar erros diferentes

Como funciona:
java// Lan√ßar exce√ß√£o:
if (energia < 15) {
    throw new EnergiaInsuficienteException("Sem energia!");
}

// Capturar exce√ß√£o:
try {
    dragao.atacar();
} catch (EnergiaInsuficienteException e) {
    System.out.println(e.getMessage());
}
Onde est√°:

DragaoInvalidoException - drag√£o com dados inv√°lidos
EnergiaInsuficienteException - energia insuficiente para atacar
TreinadorSemEspacoException - treinador com time cheio (6 drag√µes)


üìú INTERFACE
javapublic interface ICombate {
    int atacar() throws EnergiaInsuficienteException;
    void defender(int dano);
}
O que √©: Um contrato que define quais m√©todos uma classe DEVE ter.
Por que usar:

Garante que toda criatura de combate pode atacar e defender
Permite polimorfismo (tratar diferentes classes igualmente)

Como funciona:
java// Dragao DEVE implementar TODOS os m√©todos da interface:
public class Dragao extends Criatura implements ICombate {
    @Override
    public int atacar() { ... }  // OBRIGAT√ìRIO
    
    @Override
    public void defender(int dano) { ... }  // OBRIGAT√ìRIO
}

üèõÔ∏è CLASSE ABSTRATA
javapublic abstract class Criatura {
    protected String nome;
    protected int vida;
    
    // M√©todo ABSTRATO (sem implementa√ß√£o)
    public abstract void exibirInfo();
    
    // M√©todo CONCRETO (com implementa√ß√£o)
    public void receberDano(int dano) {
        this.vida -= dano;
        // ... l√≥gica completa
    }
}
O que √©: Classe incompleta que serve de base para outras.
Diferen√ßa de Interface:

Pode ter m√©todos com e sem implementa√ß√£o
Pode ter atributos
N√£o pode ser instanciada (new Criatura() ‚ùå)

Por que usar:

Compartilha c√≥digo comum entre classes filhas
Define m√©todos que as filhas DEVEM implementar

Onde est√°:

Criatura.java - base para todos os seres vivos


üë®‚Äçüë¶ HERAN√áA
javapublic class Dragao extends Criatura implements ICombate {
    // Dragao HERDA tudo de Criatura
    // + implementa ICombate
}

public class DragaoDeFogo extends Dragao {
    // DragaoDeFogo HERDA tudo de Dragao
    // que HERDA tudo de Criatura
}
O que √©: Uma classe "filho" recebe tudo da classe "pai".
Hierarquia:
Criatura (abstrata)
    ‚Üì
Dragao (abstrata) + ICombate
    ‚Üì
DragaoDeFogo, DragaoDeGelo, DragaoDeRaio
O que √© herdado:

Atributos: nome, vida, energia
M√©todos: receberDano(), estaVivo()


üîí ENCAPSULAMENTO
javapublic class Criatura {
    protected String nome;     // Vis√≠vel para filhas
    private int vida;          // S√≥ dentro desta classe
    
    public int getVida() {     // Acesso controlado
        return vida;
    }
}
O que √©: Esconder dados internos e controlar o acesso.
Modificadores de acesso:

private - s√≥ dentro da classe
protected - classe + filhas
public - todo mundo

Por que usar:

Protege dados de altera√ß√µes indevidas
Centraliza valida√ß√µes nos setters
Facilita manuten√ß√£o


üîÑ POLIMORFISMO DE M√âTODO (Sobrecarga)
java// Mesmo nome, par√¢metros diferentes
public int atacar() throws EnergiaInsuficienteException {
    return poder;  // Ataque simples
}

public int atacar(Dragao oponente) throws EnergiaInsuficienteException {
    int dano = atacar();  // Chama o m√©todo acima
    if (this.elemento.temVantagemContra(oponente.getElemento())) {
        return (int)(dano * 1.5);  // Ataque com vantagem
    }
    return dano;
}
O que √©: M√∫ltiplos m√©todos com mesmo nome, mas par√¢metros diferentes.
Java escolhe qual m√©todo usar baseado nos par√¢metros:

atacar() ‚Üí ataque normal
atacar(dragaoInimigo) ‚Üí ataque com c√°lculo de vantagem


üé≠ POLIMORFISMO DE CLASSE (Sobrescrita)
java// Na classe Dragao:
public abstract class Dragao extends Criatura {
    @Override  // Sobrescreve m√©todo da Criatura
    public void exibirInfo() {
        System.out.println(nome + " (" + elemento + ")");
    }
}

// Na classe DragaoDeFogo:
public class DragaoDeFogo extends Dragao {
    // N√£o sobrescreve, usa o m√©todo de Dragao
}
O que √©: Classes filhas reimplementam m√©todos das classes pai.
Exemplo pr√°tico:
javaList<Dragao> dragoes = new ArrayList<>();
dragoes.add(new DragaoDeFogo("Inferno"));
dragoes.add(new DragaoDeGelo("Glacius"));

// Cada drag√£o usa SUA vers√£o do m√©todo:
for (Dragao d : dragoes) {
    d.exibirInfo();  // Comportamento diferente para cada tipo
}

üèóÔ∏è CONSTRUTORES
javapublic class Dragao extends Criatura {
    
    // Construtor 1 (padr√£o)
    public Dragao(String nome, Elemento elemento) {
        super(nome, 100);  // Chama construtor da Criatura
        this.elemento = elemento;
        this.poder = 20;
    }
    
    // Construtor 2 (sobrecarregado)
    public Dragao(String nome, Elemento elemento, int poder) {
        super(nome, 100);
        this.elemento = elemento;
        this.poder = poder;  // Poder customizado
    }
}
O que √©: M√©todo especial para criar objetos.
Sobrecarga de construtores:

Mesmo nome da classe
Par√¢metros diferentes
Java escolhe qual usar baseado nos argumentos

Uso:
javaDragao d1 = new Dragao("Smaug", Elemento.FOGO);           // Construtor 1
Dragao d2 = new Dragao("Alduin", Elemento.FOGO, 50);     // Construtor 2

üîó RELACIONAMENTO DE CLASSES
1. Composi√ß√£o (HAS-A forte)
javapublic class Treinador {
    private List<Dragao> dragoes;  // Treinador TEM drag√µes
    
    public Treinador(String nome) {
        this.dragoes = new ArrayList<>();  // Cria a lista
    }
}
O que √©: Uma classe possui outra e √© respons√°vel por ela.
Caracter√≠sticas:

Se o Treinador √© destru√≠do, os Drag√µes tamb√©m s√£o
Ciclo de vida dependente


2. Agrega√ß√£o (HAS-A fraco)
javapublic class Arena {
    public void iniciarBatalha(Dragao d1, Dragao d2) {
        // Arena USA drag√µes, mas n√£o os possui
    }
}
O que √©: Uma classe usa outra, mas n√£o √© dona.
Caracter√≠sticas:

Arena n√£o cria nem destroi drag√µes
Drag√µes existem independente da Arena
Apenas recebe refer√™ncias tempor√°rias


3. Associa√ß√£o
javapublic int atacar(Dragao oponente) {
    // Dragao interage com outro Dragao
}
O que √©: Classes que interagem entre si.

üéÆ 3. FLUXO DO PROGRAMA
Main.java - Interface com usu√°rio
javapublic static void main(String[] args) {
    int opcao;
    
    do {  // DO-WHILE: executa pelo menos 1 vez
        exibirMenu();
        opcao = sc.nextInt();
        
        switch (opcao) {
            case 1 -> criarTreinador();
            case 2 -> criarDragao();
            case 3 -> listarTreinadores();
            case 4 -> batalhar();
        }
    } while (opcao != 0);  // Repete at√© usu√°rio sair
}
Fun√ß√µes:

criarTreinador() - Cria novo treinador
criarDragao() - Cria drag√£o e adiciona a um treinador
listarTreinadores() - Mostra todos os treinadores e drag√µes
batalhar() - Inicia batalha entre 2 drag√µes


Exemplo de Fluxo Completo:
java// 1. Criar treinadores
Treinador ash = new Treinador("Ash");
Treinador misty = new Treinador("Misty");

// 2. Criar drag√µes
DragaoDeFogo charizard = new DragaoDeFogo("Charizard");
DragaoDeGelo articuno = new DragaoDeGelo("Articuno");

// 3. Adicionar drag√µes aos treinadores (Composi√ß√£o)
ash.adicionarDragao(charizard);
misty.adicionarDragao(articuno);

// 4. Batalha na arena (Agrega√ß√£o)
Arena arena = new Arena();
arena.iniciarBatalha(charizard, articuno);

// Durante a batalha:
try {
    int dano = charizard.atacar(articuno);  // Polimorfismo de m√©todo
    articuno.receberDano(dano);              // M√©todo herdado de Criatura
} catch (EnergiaInsuficienteException e) {  // Exce√ß√£o personalizada
    System.out.println(e.getMessage());
}


ü§î 5. PERGUNTAS PARA FIXAR

Por que Criatura √© abstrata?

Porque n√£o faz sentido criar uma "Criatura gen√©rica", s√≥ drag√µes espec√≠ficos


Qual a diferen√ßa entre Interface e Classe Abstrata?

Interface: s√≥ assinaturas (contrato puro)
Abstrata: pode ter c√≥digo implementado + atributos


Por que usar Enum ao inv√©s de String?

Evita erros, garante valores v√°lidos, permite m√©todos


O que acontece se n√£o capturar a exce√ß√£o?

Programa para/quebra com erro


Composi√ß√£o vs Agrega√ß√£o?

Composi√ß√£o: dona (Treinador possui Drag√£o)
Agrega√ß√£o: usa (Arena usa Drag√£o temporariamente)
